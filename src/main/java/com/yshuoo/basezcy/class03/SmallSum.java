package com.yshuoo.basezcy.class03;

import java.util.ArrayList;
import java.util.List;

/**
 * @Author yangshuo
 * @Date 2021/5/11 16:18
 */
public class SmallSum {

   public static int smallSum(int[] arr) {
        if (arr == null || arr.length < 2) {
            return 0;
        }
        return process(arr, 0, arr.length - 1);
    }

    // arr[L..R]既要排好序，也要求小和返回
    // 所有merge时，产生的小和，累加
    // 左 排序   merge
    // 右 排序  merge
    // merge
    public static int process(int[] arr, int l, int r) {
        if (l == r) {
            return 0;
        }
        // l < r
        int mid = l + ((r - l) >> 1);
        return
                process(arr, l, mid)
                        +
                        process(arr, mid + 1, r)
                        +
                        merge(arr, l, mid, r);
    }


    public static int merge(int[] arr, int L, int m, int r) {
        int[] help = new int[r - L + 1];
        int i = 0;
        int p1 = L;
        int p2 = m + 1;
        int res = 0;
        while (p1 <= m && p2 <= r) {
            // 利用右边有序，根据序号直接算出有几个arr[p1]
            res += arr[p1] <= arr[p2] ? arr[p1] * (r - p2 + 1) : 0;
            help[i++] = arr[p1] <= arr[p2] ? arr[p1++] : arr[p2++];
        }
        while (p1 <= m) {
            help[i++] = arr[p1++];
        }
        while (p2 <= r) {
            help[i++] = arr[p2++];
        }
        for (i = 0; i < help.length; i++) {
            arr[L + i] = help[i];
        }
        return res;
    }

    public static long sum = 0;
    public static int[] res;
    public static List<Integer> midlist = new ArrayList<>();
    public static List<Integer> midlist1 = new ArrayList<>();


    public static void sort(int[] nums, int start,int end){
        if(start >= end){
            return;
        }
        int mid = start + ((end - start) / 2);
        sort(nums,start,mid);
        sort(nums,mid + 1,end);
        m(nums,start,mid,end);
    }


    public static void m(int[] nums,int low,int mid,int high){
        int i = low,j = mid + 1,k = low;
        for(int p = low;p <= high; p++){
            res[p] = nums[p];
        }
        while(i <= mid && j <= high){
            if(res[i] <= res[j]){
                int a = (high - j + 1) * res[i];
                sum += a;
                midlist1.add(a);
                //System.out.println("中间结果" + sum);
            }
            nums[k++] = res[i] > res[j] ? res[j++] : res[i++];
        }
        while(i <= mid){
            nums[k++] = res[i++];
        }
        while(j <= high){
            nums[k++] = res[j++];
        }
    }


    public static void main(String[] args) {

/*
        String s = "56 85 -3 -11 35 13 85 -11 -21 36 -23 -2 6 33 91 -4 -1 65 37 19 -12 29 87 29 44 40 38 78 78 52 3 80 14 -29 65 14 56 26 20 64 -16 20 52 -2 5 11 -7 -37 36 63 55 -1 52 22 56 38 6 1 2 21 91 13 37 -11 -26 52 84 38 30 30 11 -18 27 -5 -16 85 30 32 78 0 22 -7 17 22 14 -10 64 76 27 17 21 73 18 28 65 51 51 -29 -18 -4 -35 -24 -24 52 2 -12 -18 65 74 -18 32 74 23 17 42 -22 47 35 18 48 -43 31 84 -28 -14 67 4 0 55 6 19 33 51 86 20 -1 43 45 7 -17 44 33 23 52 4 48 -20 39 -22 50 13 17 43 44 38 79 62 32 57 -31 56 6 55 54 -8 83 59 -2 13 -20 -34 12 43 -11 54 16 -7 31 73 0 23 67 41 14 46 -21 -9 51 -45 47 -25 -11 63 31 32 5 28 0 26 -14 26 3 40 57 13 -28 9 33 23 14 76 17 78 75 66 59 -17 66 4 30 40 46 27 14 -7 -23 78 -26 17 -22 29 -37 63 27 56 48 58 32 10 19 10 5 5 30 9 26 6 50 4 38 7 73 0 35 16 -26 13 23 22 3 -5 51 48 61 7 46 20 26 1 9 -13 -9 79 70 -32 -15 76 76 31 71 3 68 5 55 -2 -34 -9 38 -16 30 54 34 2 9 18 12 69 -41 14 -21 31 39 -5 50 53 85 9 53 3 14 62 20 95 40 77 19 -15 63 -10 53 53 62 35 9 -36 87 -6 34 -16 76 58 -34 -28 94 66 93 23 49 54 28 42 72 13 49 62 64 16 5 35 10 29 -15 51 47 -7 16 66 8 -41 46 -39 25 20 12 62 42 -10 37 55 22 -3 14 17 44 70 7 68 19 34 70 -11 -37 28 53 63 -19 21 1 50 74 64 41 20 38 38 78 75 73 -1 -2 -19 48 -35 73 -49 44 54 75 -23 49 38 6 33 24 72 40 49 75 44 -30 37 40 49 22 -12 -26 7 1 18 41 11 28 48 42 18 44 3 -21 31 -27 72 -30 -26 6 -6 81 28 -24 58 27 -24 15 35 43 25 11 64 -18 21 41 -42 14 80 25 -14 17 34 37 8 19 39 81 -3 7 53 27 23 55 52 48 -12 30 24 -26 67 17 34 66 46 54 25 58 9 64 6 24 79 -17 54 10 -27 71 -5 1 17 43 65 61 -35 -33 6 35 70 48 81 60 35 -11 23 6 64 4 7 -11 20 63 25 -11 20 17 8 18 21 67 67 -36 -1 18 -9 -3 54 37 64 7 -31 42 -7 46 66 -8 15 -33 -16 28 -15 -4 -15 29 55 55 27 3 -32 -9 -25 96 5 -12 24 51 5 -4 -2 17 10 61 64 -9 2 89 -22 14 -10 -5 19 54 79 51 58 84 82 53 15 31 64 16 42 82 -19 4 35 -1 16 32 4 -19 10 83 54 8 -14 -4 82 24 3 58 -17 60 52 98 60 64 74 52 46 3 9 51 -7 41 12 64 0 10 53 -21 45 -5 2 20 70 -11 20 62 -2 62 -28 -26 75 45 31 -23 1 9 68 48 49 -40 9 75 1 62 -17 34 86 -4 44 30 -10 69 20 56 25 -4 -16 10 15 47 51 7 43 17 26 46 33 37 43 61 11 -2 -9 -26 71 67 80 48 50 33 -4 -43 15 69 -2 -25 35 -10 67 -18 41 66 -12 7 31 25 47 15 67 70 92 22 9 30 -1 27 46 -27 -30 68 79 5 21 3 12 19 24 -26 -1 -33 15 34 30 -8 -32 24 73 30 54 5 71 76 -21 16 -26 18 28 24 11 72 6 -18 -31 37 63 60 30 35 64 57 26 -27 -43 76 -27 27 14 26 18 -7 6 43 2 63 5 -26 35 24 19 -30 -11 -20 -27 20 -15 43 48 34 -4 59 38 21 37 -46 14 49 8 -42 22 27 61 -5 -16 20 66 31 59 -4 -4 28 51 -20 57 72 54 -16 20 34 51 4 15 57 -20 -18 24 39 36 44 -25 71 0 45 49 13 -23 -23 38 70 40 68 0 -8 17 71 -1 -1 55 41 -5 -10 36 56 92 21 10 24 73 40 62 -47 12 6 13 63 1 -7 -5 40 35 -16 2 86 -5 60 62 -9 25 48 -24 36 6 41 61 19 35 67 -5 63 26 50 3 50 -6 50 13 47 -6 -1 86 0 21 73 28 67 -21 63 -9 76 5 72 17 -26 79 -20 67 99 -33 69 2 -17 18 0 -13 59 57 5 84 62 59 41 23 -20 14 13 2 -36 50 28 52 38 31 -5 32 52 -31 3 37 20 75 29 36 49 30 39 24 25 45 9 63 -38 44 50 2 -8 0 36 -3 5 37 53 72 17 55 -30 7 37 0 58 -8 -8 49 35 16 -21 -23 56 6 53 -6 -1 18 6 97 20 79 -28 -7 -32 45 43 26 47 -26 2 37 15 5 78 58 54 12 -11 29 57 -9 56 51 3 48 18 26 -21 68 69 -16 64 36 50 42 -9 13 45 -8 41 6 -10 47 -13 68 26 89 7 22 36 5 51 -36 46 -28 -31 68 45 -1 -10 -3 62 0 42 29 31 -42 63 90 24 5 65 77 18 27 -12 -23 82 8 75 69 23 -18 19 18 -21 53 22 17 -25 3 30 24 35 62 35 54 38 -7 2 -41 67 -9 96 60 63 -4 38 35 41 -5 5 26 61 -16 31 26 60 7 55 -31 35 24 54 -15 41 64 74 3 2 22 30 38 90 -48 29 3 79 81 43 -5 -26 -3 12 69 39 -37 7 5 17 1 29 -15 46 -30 70 32 -23 40 51 -29 43 35 51 80 71 64 44 32 45 49 24 57 79 -5 4 13 -36 -4 39 4 55 13 -24 -10 69 49 11 14 26 38 -20 -1 2 -15 83 22 0 -4 3 56 85 79 49 56 73 24 -3 31 14 69 75 60 54 25 6 -3 -23 -21 32 36 -12 53 -11 51 73 -3 16 11 55 76 36 -15 6 4 -11 12 37 9 66 18 -22 58 39 42 -20 37 48 -2 -3 4 56 81 32 34 23 33 28 74 54 -13 40 87 37 -37 84 -13 33 60 41 50 12 31 50 68 33 3 67 -24 -19 -31 17 10 17 86 69 -3 13 -41 61 12 33 14 1 59 36 -16 27 45 16 18 -3 -18 -24 20 51 2 31 6 49 41 -14 89 83 55 -30 83 38 -14 38 3 30 60 7 46 55 90 27 58 8 71 12 4 -7 -20 71 56 41 19 -1 93 55 14 22 14 65 61 37 63 85 35 -10 75 9 11 -38 19 54 59 59 44 37 -34 -11 72 9 13 26 -31 13 76 29 44 39 -6 3 26 9 68 86 6 -25 24 35 20 -31 35 6 1 78 16 56 5 -14 24 -34 2 11 41 55 -1 38 -8 19 33 2 26 75 32 35 30 73 13 48 33 0 -17 -9 42 39 28 30 -24 -16 64 -17 83 50 17 83 33 1 -6 -5 76 29 40 6 -26 -33 -24 53 37 33 25 -21 47 81 20 80 35 33 0 25 51 72 83 -33 50 43 -48 59 14 62 11 -13 -17 -25 86 85 38 41 -13 73 28 25 22 -9 58 74 -6 -23 -14 74 36 78 57 -21 7 -36 -38 34 25 -12 37 0 28 -22 19 13 52 90 64 58 -29 50 -36 45 40 62 33 -7 32 -11 52 52 -13 6 24 55 59 0 10 -41 4 51 66 -9 -29 39 -11 -19 -3 71 33 -4 -7 29 59 -13 32 59 37 12 -23 63 -43 35 -44 44 0 73 19 47 83 39 56 18 13 32 35 13 51 -19 50 61 43 88 24 80 -8 2 -15 84 -15 -20 4 -32 39 -5 46 56 -18 35 13 -20 52 76 37 -13 25 55 46 -12 -40 69 68 -24 60 41 -5 -2 3 28 -2 73 22 42 8 64 5 68 7 27 52 81 35 59 -24 -6 27 24 2 -14 48 61 3 -3 33 82 29 22 66 74 57 -16 38 52 -3 44 84 74 -41 26 -24 5 -25 -5 62 60 41 45 33 -5 76 70 16 18 57 35 11 12 32 9 13 15 20 60 28 8 40 13 6 10 27 23 50 25 13 -14 35 -30 25 18 2 52 39 4 62 -30 -40 57 -7 67 1 46 79 14 57 7 -18 -27 18 47 20 -5 27 27 55 0 32 0 84 33 27 63 39 -7 -4 67 95 41 48 79 10 27 0 -6 24 26 -6 30 54 15 26 59 18 2 52 28 2 19 79 0 68 39 42 19 61 52 23 3 26 23 14 -25 33 29 25 35 44 -4 20 2 31 49 62 42 42 58 -10 12 13 43 36 48 46 49 -11 -7 71 59 35 41 -3 58 13 15 27 -12 58 -21 14 30 7 39 29 59 24 57 6 1 15 51 59 71 33 -11 62 -15 61 -16 19 71 -19 -19 23 3 18 19 -3 19 12 41 -8 38 62 50 -1 60 -4 53 51 -7 -2 -37 22 26 33 -32 61 6 7 66 8 12 42 -38 -9 -3 33 -25 -22 90 -29 -3 -25 58 75 67 45 2 55 -25 3 -9 -8 70 87 -15 37 32 34 69 8 61 40 20 -3 -32 64 54 -14 -15 37 -16 48 26 5 50 -3 -1 18 16 15 33 7 18 -39 94 8 -16 24 60 11 18 -17 -16 18 -4 -22 25 86 27 58 -13 43 67 -25 10 43 6 -43 -37 -30 9 43 9 41 51 4 -15 1 55 24 -3 32 58 88 10 41 -29 -30 63 50 9 -6 87 15 4 30 41 46 50 58 29 53 42 69 13 -3 30 14 51 35 -3 38 -12 60 32 29 73 29 -6 80 43 48 43 67 37 -12 14 -5 33 -5 6 72 55 18 29 -27 41 17 31 12 78 28";
*/
        String s = "35 35 35 35";
        String[] split = s.split(" ");
        int array[] = new int[split.length];
        int i = 0;
        while (i < split.length){
            array[i] = Integer.parseInt(split[i]);
            i++;
        }
        res = new int[array.length];
        sum = 0;
        forTest(array);
        sort(array,0,array.length - 1);
        int array1[] = new int[split.length];
        i = 0;
        while (i < split.length){
            array1[i] = Integer.parseInt(split[i]);
            i++;
        }
        System.out.println(sum);
        System.out.println(smallSum(array1));
        for (int j = 0; j < array1.length; j++){
            if (array[j] != array1[j]){
                System.out.println(array[j]);
                break;
            }
        }

        System.out.println(midlist.size() == midlist1.size());
        System.out.println(midlist.size());
        System.out.println(midlist1.size());

        for (int j = 0; j < midlist.size(); j++){
            if (midlist.get(j).intValue()!= midlist1.get(j).intValue()){
                System.out.println(midlist.get(j));
                System.out.println(midlist1.get(j));
                System.out.println(j);
                break;
            }
        }

    }

    public static void forTest(int[] nums){
        int length = nums.length;
        int count = 0;
        for (int i = 0; i < length; i++){
            for (int j = i + 1; j < length; j++){
                if (nums[i] < nums[j]){
                    count += nums[i];
                }
            }
        }
        System.out.println("test:" + count);
    }

}
